// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  buyers        Buyer[]   @relation("BuyerOwner")
  buyerHistory  History[] @relation("HistoryUser")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String?  @db.Text
  access_token     String?  @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?  @db.Text
  session_state    String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Buyer {
  id            String    @id @default(cuid())
  fullName      String    @db.VarChar(80)
  email         String?   @db.VarChar(255)
  phone         String    @db.VarChar(15)
  city          City
  propertyType  PropertyType
  bhk           BHK?
  purpose       Purpose
  budgetMin     Int?
  budgetMax     Int?
  timeline      Timeline
  source        Source
  status        Status    @default(New)
  notes         String?   @db.VarChar(1000)
  tags          String[]
  ownerId       String
  owner         User      @relation("BuyerOwner", fields: [ownerId], references: [id])
  history       History[] @relation("BuyerHistory")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([fullName, email, phone])
  @@index([status])
  @@index([city])
  @@index([propertyType])
  @@index([purpose])
  @@index([timeline])
  @@index([source])
  @@index([ownerId])
}

model History {
  id          String   @id @default(cuid())
  buyerId     String
  buyer       Buyer    @relation("BuyerHistory", fields: [buyerId], references: [id], onDelete: Cascade)
  changedBy   String
  changedByUser User   @relation("HistoryUser", fields: [changedBy], references: [id])
  changedAt   DateTime @default(now())
  diff        Json     // Stores the diff of changes

  @@index([buyerId])
  @@index([changedBy])
  @@index([changedAt])
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum BHK {
  Studio
  One
  Two
  Three
  Four
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZeroToThree
  ThreeToSix
  MoreThanSix
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}
